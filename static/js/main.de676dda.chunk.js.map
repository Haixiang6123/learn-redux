{"version":3,"sources":["apps/ReactReduxTodo/store/todos/reducer.ts","apps/ReactReduxTodo/store/todos/actionTypes.ts","apps/ReactReduxTodo/store/filter/reducer.ts","apps/ReactReduxTodo/store/filter/actionTypes.ts","apps/ReactReduxTodo/store/loading/reducer.ts","apps/ReactReduxTodo/store/loading/actionTypes.ts","apps/ReactReduxTodo/store/store.ts","api/index.ts","apps/ReactReduxTodo/store/loading/actionCreators.ts","apps/ReactReduxTodo/store/todos/actionCreators.ts","apps/ReactReduxTodo/store/todos/selectors.ts","apps/ReactReduxTodo/store/loading/selectors.ts","apps/ReactReduxTodo/components/TodoItem.tsx","apps/ReactReduxTodo/TodoApp.tsx","apps/ReactReduxTodo/store/filter/actionCreators.ts","apps/ReactReduxTodo/index.tsx","apps/ReduxToolkitTodo/store/filter/slice.ts","apps/ReduxToolkitTodo/store/filter/actionTypes.ts","apps/ReduxToolkitTodo/store/loading/slice.ts","apps/ReduxToolkitTodo/store/loading/actionTypes.ts","apps/ReduxToolkitTodo/store/todos/actionCreators.ts","apps/ReduxToolkitTodo/store/todos/slice.ts","apps/ReduxToolkitTodo/store/store.ts","apps/ReduxToolkitTodo/store/todos/selectors.ts","apps/ReduxToolkitTodo/store/filter/selectors.ts","apps/ReduxToolkitTodo/store/loading/selectors.ts","apps/ReduxToolkitTodo/components/TodoItem.tsx","apps/ReduxToolkitTodo/TodoApp.tsx","apps/ReduxToolkitTodo/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["initTodos","ids","entities","todosReducer","todoState","action","handlerMapper","todos","payload","produce","draft","forEach","t","id","map","newTodo","push","targetId","filter","text","todo","state","handler","type","filterReducer","initLoading","status","tip","loadingReducer","loading","reducer","combineReducers","enhancer","applyMiddleware","ReduxThunk","store","createStore","timeout","ms","Promise","resolve","setTimeout","url","fn","a","fetch","setLoading","dbTodos","updateTodo","dispatch","response","selectFilteredTodos","Object","values","selectTodoNeeded","length","selectLoading","React","props","onToggle","onRemove","onSave","useState","updating","setUpdating","setText","onPressEnter","input","value","onChange","e","target","autoFocus","onBlur","task","className","classNames","Item","onDoubleClick","checked","onClick","TodoApp","useDispatch","useSelector","todoNeeded","setTask","useEffect","onToggleTodo","useCallback","toggleTodo","onRemoveTodo","removeTodo","onUpdateTodo","onFilter","setFilter","footer","role","aria-label","Group","size","defaultValue","buttonStyle","Button","placeholder","Date","toISOString","spinning","bordered","dataSource","renderItem","ReactReduxTodo","filterSlice","createSlice","name","initialState","reducers","loadingSlice","actions","fetchTodos","createAsyncThunk","_","addTodo","todosAdapter","createEntityAdapter","selectId","sortComparer","aTodo","bTodo","localeCompare","todosSlice","getInitialState","extraReducers","builder","addCase","fulfilled","setAll","upsertOne","removeOne","updateOne","configureStore","devTools","selectTodos","createSelector","changes","ReduxToolkitTodo","TabPane","Tabs","App","locale","zhCN","defaultActiveKey","centered","tab","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.de676dda.chunk.js","sourcesContent":["import {ADD_TODO, REMOVE_TODO, SET_TODOS, TOGGLE_TODO, UPDATE_TODO} from './actionTypes'\nimport produce from 'immer'\nimport {\n  TAddTodoAction,\n  TRemoveTodoAction,\n  TSetTodosAction,\n  TTodoAction,\n  TToggleTodoAction,\n  TUpdateTodoAction\n} from './actionCreators'\n\ntype THandlerMapper = {[key: string]: (todoState: TTodoStore, action: TTodoAction) => TTodoStore}\n\nconst initTodos: TTodoStore = {\n  ids: [],\n  entities: {}\n}\n\nconst todosReducer = (todoState: TTodoStore = initTodos, action: any) => {\n  const handlerMapper: THandlerMapper = {\n    [SET_TODOS]: (todoState, action) => {\n      const {payload: todos} = action as TSetTodosAction\n\n      const entities = produce<TTodoEntities>({}, draft => {\n        todos.forEach(t => {\n          draft[t.id] = t\n        })\n      })\n\n      return {\n        ids: todos.map(t => t.id),\n        entities\n      }\n    },\n    [ADD_TODO]: (todoState, action) => {\n      return produce(todoState, draft => {\n        const {payload: newTodo} = action as TAddTodoAction\n\n        draft.ids.push(newTodo.id)\n        draft.entities[newTodo.id] = newTodo\n      })\n    },\n    [REMOVE_TODO]: (todoState, action) => {\n      return produce(todoState, draft => {\n        const {payload: targetId} = action as TRemoveTodoAction\n\n        draft.ids = draft.ids.filter(id => id !== targetId)\n        delete draft.entities[targetId]\n      })\n    },\n    [UPDATE_TODO]: (todoState, action) => {\n      return produce(todoState, draft => {\n        const {payload: {id, text}} = action as TUpdateTodoAction\n\n        draft.entities[id].text = text\n      })\n    },\n    [TOGGLE_TODO]: (todoState, action) => {\n      return produce(todoState, draft => {\n        const {payload: id} = action as TToggleTodoAction\n\n        const todo = draft.entities[id]\n\n        todo.state = todo.state === 'todo' ? 'done' : 'todo'\n      })\n    }\n  }\n\n  const handler = handlerMapper[action.type]\n\n  return handler ? handler(todoState, action) : todoState\n}\n\nexport default todosReducer\n","export const SET_TODOS = 'setTodos'\nexport type SET_TODOS = typeof SET_TODOS\n\nexport const ADD_TODO = 'addTodo'\nexport type ADD_TODO = typeof ADD_TODO\n\nexport const UPDATE_TODO = 'updateTodo'\nexport type UPDATE_TODO = typeof UPDATE_TODO\n\nexport const REMOVE_TODO = 'removeTodo'\nexport type REMOVE_TODO = typeof REMOVE_TODO\n\nexport const TOGGLE_TODO = 'toggleTodo'\nexport type TOGGLE_TODO = typeof TOGGLE_TODO\n","import {SET_FILTER} from \"./actionTypes\"\n\ntype THandlerMapper = {[key: string]: (filter: TFilter, action: any) => TFilter}\n\nconst initFilter: TFilter = 'all'\n\nconst filterReducer = (filter: TFilter = initFilter, action: any) => {\n  const handlerMapper: THandlerMapper = {\n    [SET_FILTER]: (filter, action) => {\n      return action.payload\n    }\n  }\n\n  const handler = handlerMapper[action.type]\n\n  return handler ? handler(filter, action) : filter\n}\n\nexport default filterReducer\n","export const SET_FILTER = 'setFilter'\n","import {SET_LOADING} from \"./actionTypes\"\n\ntype THandlerMapper = {[key: string]: (loading: TLoading, action: any) => TLoading}\n\nconst initLoading: TLoading = {\n  status: false,\n  tip: ''\n}\n\nconst loadingReducer = (loading = initLoading, action: any) => {\n  const handlerMapper: THandlerMapper = {\n    [SET_LOADING]: (loading, action) => {\n      return {...loading, ...action.payload}\n    }\n  }\n\n  const handler = handlerMapper[action.type]\n\n  return handler ? handler(loading, action) : loading\n}\n\nexport default loadingReducer\n","export const SET_LOADING = 'setLoading'\n","import {applyMiddleware, combineReducers, createStore} from \"redux\"\nimport ReduxThunk from 'redux-thunk'\nimport {composeWithDevTools} from 'redux-devtools-extension'\nimport todosReducer from \"./todos/reducer\"\nimport filterReducer from \"./filter/reducer\"\nimport loadingReducer from \"./loading/reducer\"\n\nconst reducer = combineReducers({\n  todos: todosReducer,\n  filter: filterReducer,\n  loading: loadingReducer\n})\n\nconst enhancer = process.env.NODE_ENV === 'development' ? composeWithDevTools(\n  applyMiddleware(ReduxThunk)\n) :applyMiddleware(ReduxThunk)\n\nconst store = createStore(reducer, enhancer)\n\nexport default store\n","const timeout = (ms: number) => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nasync function fetch(url: string, fn: Function) {\n  await timeout(1500);\n  return fn();\n}\n\nexport default fetch\n","import {SET_LOADING} from './actionTypes'\n\nexport const setLoading = (loading: TLoading) => ({\n  type: SET_LOADING,\n  payload: loading\n})\n","import {Dispatch} from \"redux\"\nimport fetch from \"../../../../api\"\nimport {setLoading} from \"../loading/actionCreators\"\nimport {ADD_TODO, REMOVE_TODO, SET_TODOS, TOGGLE_TODO, UPDATE_TODO} from './actionTypes'\n\nconst dbTodos: TTodo[] = [\n  {\n    id: '1',\n    text: '抽烟',\n    state: 'done'\n  },\n  {\n    id: '2',\n    text: '喝酒',\n    state: 'todo'\n  },\n  {\n    id: '3',\n    text: '烫头',\n    state: 'todo'\n  }\n]\n\nexport type TSetTodosAction = {\n  type: SET_TODOS;\n  payload: TTodo[];\n}\n\nexport type TAddTodoAction = {\n  type: ADD_TODO;\n  payload: TTodo;\n}\n\nexport type TRemoveTodoAction = {\n  type: REMOVE_TODO;\n  payload: string;\n}\n\nexport type TUpdateTodoAction = {\n  type: UPDATE_TODO;\n  payload: {\n    id: string;\n    text: string\n  }\n}\n\nexport type TToggleTodoAction = {\n  type: TOGGLE_TODO;\n  payload: string;\n}\n\nexport type TTodoAction = TSetTodosAction | TAddTodoAction | TRemoveTodoAction | TUpdateTodoAction | TToggleTodoAction\n\nexport const fetchTodos = () => async (dispatch: Dispatch) => {\n  dispatch(setLoading({status: true, tip: '加载中...'}))\n\n  const response: TTodo = await fetch('/fetchTodos', () => dbTodos)\n\n  dispatch({ type: SET_TODOS, payload: response })\n\n  dispatch(setLoading({status: false, tip: ''}))\n}\n\nexport const addTodo = (newTodo: Partial<TTodo>) => async (dispatch: Dispatch) => {\n  dispatch(setLoading({status: true, tip: '添加中...'}))\n\n  const response: TTodo = await fetch('/addTodo', () => ({\n    id: new Date().toISOString(),\n    ...newTodo\n  }))\n\n  dispatch({ type: ADD_TODO, payload: response })\n\n  dispatch(setLoading({status: false, tip: ''}))\n}\n\nexport const removeTodo = (id: string) => async (dispatch: Dispatch) => {\n  dispatch(setLoading({status: true, tip: '移除中...'}))\n\n  const response = await fetch('/removeTodo', () => id)\n\n  dispatch({ type: REMOVE_TODO, payload: response })\n\n  dispatch(setLoading({status: false, tip: ''}))\n}\n\nexport const updateTodo = (id: string, text: string) => async (dispatch: Dispatch) => {\n  dispatch(setLoading({status: true, tip: '更新中...'}))\n\n  const response = await fetch('/updateTodo', () => ({ id, text }))\n\n  dispatch({ type: UPDATE_TODO, payload: response })\n\n  dispatch(setLoading({status: false, tip: ''}))\n}\n\nexport const toggleTodo = (id: string) => async (dispatch: Dispatch) => {\n  dispatch(setLoading({status: true, tip: '更新状态...'}))\n\n  const response = await fetch('/toggleTodo', () => id)\n\n  dispatch({ type: TOGGLE_TODO, payload: response })\n\n  dispatch(setLoading({status: false, tip: ''}))\n}\n","export const selectFilteredTodos = (state: TStore): TTodo[] => {\n  const todos = Object.values(state.todos.entities)\n\n  if (state.filter === 'all') {\n    return todos\n  }\n\n  return todos.filter(todo => todo.state === state.filter)\n}\nexport const selectTodoNeeded = (state: TStore): number => {\n  return Object.values(state.todos.entities).filter(todo => todo.state === 'todo').length\n}\n","export const selectLoading = (state: TStore) => {\n  return state.loading\n}\n","import * as React from 'react'\nimport {FC, useState} from 'react'\nimport {Checkbox, Input, List} from 'antd'\nimport classNames from 'classnames'\nimport {CloseOutlined} from '@ant-design/icons/lib'\n\ninterface IProps {\n  todo: TTodo;\n  onToggle: (id: string) => void;\n  onRemove: (id: string) => void;\n  onSave: (id: string, text: string) => void;\n}\n\nconst TodoItem: FC<IProps> = (props) => {\n  const {todo, onToggle, onRemove, onSave} = props\n\n  const [updating, setUpdating] = useState<boolean>(false)\n  const [text, setText] = useState<string>(todo.text)\n\n  const onPressEnter = async () => {\n    await onSave(todo.id, text)\n    setUpdating(false)\n  }\n\n  const input = (\n    <Input value={text}\n           onChange={e => setText(e.target.value)}\n           autoFocus\n           onPressEnter={onPressEnter}\n           onBlur={() => setUpdating(false)}/>\n  )\n\n  const task = (\n    <span className={classNames('todo-text', {'done': todo.state === 'done'})}>\n      {todo.text}\n    </span>\n  )\n\n  return (\n    <List.Item className=\"todo-item\" onDoubleClick={() => setUpdating(true)}>\n      <span className=\"todo-left\">\n        <Checkbox className=\"todo-check\" checked={todo.state === 'done'} onChange={() => onToggle(todo.id)}/>\n        {updating ? input : task}\n      </span>\n      <span className=\"todo-right\" onClick={() => onRemove(todo.id)}>\n        <CloseOutlined/>\n      </span>\n    </List.Item>\n  )\n}\n\nexport default React.memo(TodoItem)\n","import * as React from \"react\"\nimport {FC, useCallback, useEffect, useState} from \"react\"\nimport {Input, List, Radio, Spin} from \"antd\"\nimport {useDispatch, useSelector} from \"react-redux\"\nimport {addTodo, fetchTodos, removeTodo, toggleTodo, updateTodo} from './store/todos/actionCreators'\nimport {setFilter} from \"./store/filter/actionCreators\"\nimport {selectFilteredTodos, selectTodoNeeded} from \"./store/todos/selectors\"\nimport {selectLoading} from \"./store/loading/selectors\"\nimport TodoItem from \"./components/TodoItem\"\n\nconst TodoApp: FC = () => {\n  const dispatch = useDispatch()\n\n  const todos = useSelector<TStore, TTodo[]>(selectFilteredTodos)\n  const todoNeeded = useSelector<TStore, number>(selectTodoNeeded)\n  const loading = useSelector<TStore, TLoading>(selectLoading)\n\n  const [task, setTask] = useState<string>('')\n\n  useEffect(() => {\n    dispatch(fetchTodos())\n  }, [dispatch])\n\n  const onAddTodo = () => {\n    dispatch(addTodo({\n      text: task,\n      state: 'todo'\n    }))\n    setTask('')\n  }\n\n  const onToggleTodo = useCallback((id: string) => {\n    dispatch(toggleTodo(id))\n  }, [dispatch])\n\n  const onRemoveTodo = useCallback((id: string) => {\n    dispatch(removeTodo(id))\n  }, [dispatch])\n\n  const onUpdateTodo = useCallback(async (id: string, text: string) => {\n    await dispatch(updateTodo(id, text))\n  }, [dispatch])\n\n  const onFilter = (filter: TFilter) => {\n    dispatch(setFilter(filter))\n  }\n\n  const footer = (\n    <div className=\"footer\">\n      {todoNeeded > 0 &&\n      <span className=\"todo-needed\">\n          还剩{todoNeeded}项 <span role=\"img\" aria-label=\"Clap\">🎉</span>\n        </span>\n      }\n\n      <Radio.Group onChange={e => onFilter(e.target.value)}\n                   size=\"small\"\n                   defaultValue=\"all\"\n                   buttonStyle=\"solid\">\n        <Radio.Button className=\"filter-item\" value=\"all\">全部</Radio.Button>\n        <Radio.Button className=\"filter-item\" value=\"done\">已完成</Radio.Button>\n        <Radio.Button className=\"filter-item\" value=\"todo\">待完成</Radio.Button>\n      </Radio.Group>\n    </div>\n  )\n\n  return (\n    <div className=\"app\">\n      <h1>react-redux todos</h1>\n\n      <Input size=\"large\"\n             placeholder=\"今天想干嘛\"\n             value={task}\n             onChange={e => setTask(e.target.value)}\n             onPressEnter={onAddTodo}\n      />\n\n      <Spin spinning={loading.status} tip={loading.tip}>\n        <List\n          className=\"todo-list\"\n          footer={footer}\n          bordered\n          dataSource={todos}\n          renderItem={todo => (\n            <TodoItem onRemove={onRemoveTodo} onToggle={onToggleTodo} onSave={onUpdateTodo} todo={todo}/>\n          )}\n        />\n      </Spin>\n    </div>\n  )\n}\n\nexport default TodoApp\n","import {Dispatch} from \"redux\"\nimport {setLoading} from \"../loading/actionCreators\"\n\nexport const setFilter = (filter: TFilter) => async (dispatch: Dispatch) => {\n  dispatch(setLoading({status: true, tip: '加载中...'}))\n\n  dispatch({\n    type: 'setFilter',\n    payload: filter\n  })\n\n  dispatch(setLoading({status: false, tip: ''}))\n}\n","import * as React from \"react\"\nimport {Provider} from 'react-redux'\nimport {FC} from \"react\"\nimport store from \"./store/store\"\nimport TodoApp from \"./TodoApp\"\n\nconst ReactReduxTodo: FC = () => {\n  return (\n    <Provider store={store}>\n      <TodoApp />\n    </Provider>\n  )\n}\n\nexport default ReactReduxTodo\n","import {createSlice} from '@reduxjs/toolkit'\nimport {SET_FILTER} from './actionTypes'\n\nconst initFilter: TFilter = 'all'\n\nconst filterSlice = createSlice({\n  name: 'filter',\n  initialState: initFilter,\n  reducers: {\n    [SET_FILTER]: (state, action) => {\n      return action.payload\n    }\n  },\n})\n\nexport default filterSlice\n","export const SET_FILTER = 'setFilter'\n","import {createSlice} from '@reduxjs/toolkit'\nimport {SET_LOADING} from './actionTypes'\n\nconst initLoading: TLoading = {\n  status: false,\n  tip: ''\n}\n\nconst loadingSlice = createSlice({\n  name: 'loading',\n  initialState: initLoading,\n  reducers: {\n    [SET_LOADING]: (state, action) => {\n      return {...state, ...action.payload}\n    }\n  }\n})\n\nexport default loadingSlice\n","export const SET_LOADING = 'setLoading'\n","import fetch from '../../../../api'\nimport loadingSlice from '../loading/slice'\nimport {ADD_TODO, FETCH_TODOS, REMOVE_TODO, TOGGLE_TODO, UPDATE_TODO} from './actionTypes'\nimport {createAsyncThunk, Update} from '@reduxjs/toolkit'\n\nconst {setLoading} = loadingSlice.actions\n\nconst dbTodos: TTodo[] = [\n  {\n    id: '1',\n    text: '抽烟',\n    state: 'done'\n  },\n  {\n    id: '2',\n    text: '喝酒',\n    state: 'todo'\n  },\n  {\n    id: '3',\n    text: '烫头',\n    state: 'todo'\n  }\n]\n\nexport type TSetTodosAction = {\n  type: string;\n  payload: TTodo[];\n}\n\nexport type TAddTodoAction = {\n  type: string;\n  payload: TTodo;\n}\n\nexport type TRemoveTodoAction = {\n  type: string;\n  payload: string;\n}\n\nexport type TUpdateTodoAction = {\n  type: string;\n  payload: Update<TTodo>\n}\n\nexport type TToggleTodoAction = {\n  type: string;\n  payload: string;\n}\n\nexport const fetchTodos = createAsyncThunk<TTodo[]>(\n  'todos/' + FETCH_TODOS,\n  async (_, {dispatch}) => {\n    dispatch(setLoading({status: true, tip: '加载中...'}))\n\n    const response: TTodo[] = await fetch('/fetchTodos', () => dbTodos)\n\n    dispatch(setLoading({status: false, tip: ''}))\n\n    return response\n  }\n)\n\nexport const addTodo = createAsyncThunk<TTodo, Partial<TTodo>>(\n  'todos/' + ADD_TODO,\n  async (newTodo, {dispatch}) => {\n    dispatch(setLoading({status: true, tip: '添加中...'}))\n\n    const response: TTodo = await fetch('/addTodo', () => ({\n      id: new Date().toISOString(),\n      ...newTodo\n    }))\n\n    dispatch(setLoading({status: false, tip: ''}))\n\n    return response\n  }\n)\n\nexport const removeTodo = createAsyncThunk<string, string>(\n  'todos/' + REMOVE_TODO,\n  async (id, {dispatch}) => {\n    dispatch(setLoading({status: true, tip: '移除中...'}))\n\n    const response = await fetch('/removeTodo', () => id)\n\n    dispatch(setLoading({status: false, tip: ''}))\n\n    return response\n  }\n)\n\nexport const updateTodo = createAsyncThunk<Update<TTodo>, Update<TTodo>>(\n  'todos/' + UPDATE_TODO,\n  async (newTodo, {dispatch}) => {\n    dispatch(setLoading({status: true, tip: '更新中...'}))\n\n    const response = await fetch('/updateTodo', () => newTodo)\n\n    dispatch(setLoading({status: false, tip: ''}))\n\n    return response\n  }\n)\n\nexport const toggleTodo = createAsyncThunk<string, string>(\n  'todos/' + TOGGLE_TODO,\n  async (id, {dispatch}) => {\n    dispatch(setLoading({status: true, tip: '更新状态...'}))\n\n    const response = await fetch('/toggleTodo', () => id)\n\n    dispatch(setLoading({status: false, tip: ''}))\n\n    return response\n  }\n)\n","import {createEntityAdapter, createSlice} from '@reduxjs/toolkit'\nimport {\n  addTodo,\n  fetchTodos,\n  removeTodo,\n  TAddTodoAction, toggleTodo,\n  TRemoveTodoAction,\n  TSetTodosAction, TToggleTodoAction,\n  TUpdateTodoAction,\n  updateTodo\n} from './actionCreators'\n\nconst todosAdapter = createEntityAdapter<TTodo>({\n  selectId: todo => todo.id,\n  sortComparer: (aTodo, bTodo) => aTodo.id.localeCompare(bTodo.id),\n})\n\nconst todosSlice = createSlice({\n  name: 'todos',\n  initialState: todosAdapter.getInitialState(),\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchTodos.fulfilled, (state, action: TSetTodosAction) => {\n      todosAdapter.setAll(state, action.payload);\n    })\n\n    builder.addCase(addTodo.fulfilled, (state, action: TAddTodoAction) => {\n      todosAdapter.upsertOne(state, action.payload)\n    })\n\n    builder.addCase(removeTodo.fulfilled, (state, action: TRemoveTodoAction) => {\n      todosAdapter.removeOne(state, action.payload);\n    })\n\n    builder.addCase(updateTodo.fulfilled, (state, action: TUpdateTodoAction) => {\n      todosAdapter.updateOne(state, action.payload)\n    })\n\n    builder.addCase(toggleTodo.fulfilled, (state, action: TToggleTodoAction) => {\n      const {payload: id} = action as TToggleTodoAction\n\n      const todo = state.entities[id]\n\n      todo!.state = todo!.state === 'todo' ? 'done' : 'todo'\n    })\n  }\n})\n\nexport default todosSlice\n","import filterSlice from './filter/slice'\nimport loadingSlice from './loading/slice'\nimport todosSlice from './todos/slice'\nimport {combineReducers, configureStore} from '@reduxjs/toolkit'\n\nconst reducer = combineReducers({\n  todos: todosSlice.reducer,\n  filter: filterSlice.reducer,\n  loading: loadingSlice.reducer\n})\n\nconst store = configureStore({\n  reducer,\n  devTools: true\n})\n\nexport default store\n","import {createSelector} from '@reduxjs/toolkit'\nimport {selectFilter} from '../filter/selectors'\n\nexport const selectTodos = (state: TStore) => Object.values(state.todos.entities)\n\nexport const selectFilteredTodos = createSelector<TStore, TTodo[], TFilter, TTodo[]>(\n  selectTodos,\n  selectFilter,\n  (todos: TTodo[], filter: TFilter) => {\n    if (filter === 'all') {\n      return todos\n    }\n\n    return todos.filter(todo => todo.state === filter)\n  }\n)\n\nexport const selectTodoNeeded = createSelector<TStore, TTodo[], number>(\n  selectTodos,\n  (todos: TTodo[]) => todos.filter(todo => todo.state === 'todo').length\n)\n","export const selectFilter = (state: TStore) => state.filter\n","export const selectLoading = (state: TStore) => {\n  return state.loading\n}\n","import * as React from 'react'\nimport {FC, useState} from 'react'\nimport {Checkbox, Input, List} from 'antd'\nimport classNames from 'classnames'\nimport {CloseOutlined} from '@ant-design/icons/lib'\n\ninterface IProps {\n  todo: TTodo;\n  onToggle: (id: string) => void;\n  onRemove: (id: string) => void;\n  onSave: (id: string, text: string, state: TFilter) => void;\n}\n\nconst TodoItem: FC<IProps> = (props) => {\n  const {todo, onToggle, onRemove, onSave} = props\n\n  const [updating, setUpdating] = useState<boolean>(false)\n  const [text, setText] = useState<string>(todo.text)\n\n  const onPressEnter = async () => {\n    await onSave(todo.id, text, todo.state)\n    setUpdating(false)\n  }\n\n  const input = (\n    <Input value={text}\n           onChange={e => setText(e.target.value)}\n           autoFocus\n           onPressEnter={onPressEnter}\n           onBlur={() => setUpdating(false)}/>\n  )\n\n  const task = (\n    <span className={classNames('todo-text', {'done': todo.state === 'done'})}>\n      {todo.text}\n    </span>\n  )\n\n  return (\n    <List.Item className=\"todo-item\" onDoubleClick={() => setUpdating(true)}>\n      <span className=\"todo-left\">\n        <Checkbox className=\"todo-check\" checked={todo.state === 'done'} onChange={() => onToggle(todo.id)}/>\n        {updating ? input : task}\n      </span>\n      <span className=\"todo-right\" onClick={() => onRemove(todo.id)}>\n        <CloseOutlined/>\n      </span>\n    </List.Item>\n  )\n}\n\nexport default React.memo(TodoItem)\n","import * as React from 'react'\nimport {FC, useCallback, useEffect, useState} from 'react'\nimport {Input, List, Radio, Spin} from 'antd'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {addTodo, fetchTodos, removeTodo, toggleTodo, updateTodo} from './store/todos/actionCreators'\nimport {selectFilteredTodos, selectTodoNeeded} from './store/todos/selectors'\nimport {selectLoading} from './store/loading/selectors'\nimport TodoItem from './components/TodoItem'\nimport filterSlice from './store/filter/slice'\n\nconst {setFilter} = filterSlice.actions\n\nconst TodoApp: FC = () => {\n  const dispatch = useDispatch()\n\n  const todos = useSelector<TStore, TTodo[]>(selectFilteredTodos)\n  const todoNeeded = useSelector<TStore, number>(selectTodoNeeded)\n  const loading = useSelector<TStore, TLoading>(selectLoading)\n\n  const [task, setTask] = useState<string>('')\n\n  useEffect(() => {\n    dispatch(fetchTodos())\n  }, [dispatch])\n\n  const onAddTodo = () => {\n    dispatch(addTodo({\n      text: task,\n      state: 'todo'\n    }))\n    setTask('')\n  }\n\n  const onToggleTodo = useCallback((id: string) => {\n    dispatch(toggleTodo(id))\n  }, [dispatch])\n\n  const onRemoveTodo = useCallback((id: string) => {\n    dispatch(removeTodo(id))\n  }, [dispatch])\n\n  const onUpdateTodo = useCallback(async (id: string, text: string, state: TFilter) => {\n    await dispatch(updateTodo({ id, changes: { text, state } }))\n  }, [dispatch])\n\n  const onFilter = (filter: TFilter) => {\n    dispatch(setFilter(filter))\n  }\n\n  const footer = (\n    <div className=\"footer\">\n      {todoNeeded > 0 &&\n      <span className=\"todo-needed\">\n          还剩{todoNeeded}项 <span role=\"img\" aria-label=\"Clap\">🎉</span>\n        </span>\n      }\n\n      <Radio.Group onChange={e => onFilter(e.target.value)}\n                   size=\"small\"\n                   defaultValue=\"all\"\n                   buttonStyle=\"solid\">\n        <Radio.Button className=\"filter-item\" value=\"all\">全部</Radio.Button>\n        <Radio.Button className=\"filter-item\" value=\"done\">已完成</Radio.Button>\n        <Radio.Button className=\"filter-item\" value=\"todo\">待完成</Radio.Button>\n      </Radio.Group>\n    </div>\n  )\n\n  return (\n    <div className=\"app\">\n      <h1>redux-toolkit todos</h1>\n\n      <Input size=\"large\"\n             placeholder=\"今天想干嘛\"\n             value={task}\n             onChange={e => setTask(e.target.value)}\n             onPressEnter={onAddTodo}\n      />\n\n      <Spin spinning={loading.status} tip={loading.tip}>\n        <List\n          className=\"todo-list\"\n          footer={footer}\n          bordered\n          dataSource={todos}\n          renderItem={todo => (\n            <TodoItem onRemove={onRemoveTodo} onToggle={onToggleTodo} onSave={onUpdateTodo} todo={todo}/>\n          )}\n        />\n      </Spin>\n    </div>\n  )\n}\n\nexport default TodoApp\n","import * as React from \"react\"\nimport {Provider} from 'react-redux'\nimport {FC} from \"react\"\nimport store from \"./store/store\"\nimport TodoApp from \"./TodoApp\"\n\nconst ReduxToolkitTodo: FC = () => {\n  return (\n    <Provider store={store}>\n      <TodoApp />\n    </Provider>\n  )\n}\n\nexport default ReduxToolkitTodo\n","import React from 'react'\nimport {ConfigProvider, Tabs} from \"antd\"\nimport ReactReduxTodo from \"./apps/ReactReduxTodo\"\nimport ReduxToolkitTodo from './apps/ReduxToolkitTodo'\nimport zhCN from 'antd/es/locale/zh_CN'\nimport 'antd/dist/antd.css'\nimport './apps/styles.scss'\n\nconst {TabPane} = Tabs\n\nfunction App() {\n  return (\n    <ConfigProvider locale={zhCN}>\n      <Tabs defaultActiveKey=\"2\" centered>\n        <TabPane tab=\"react-redux\" key=\"1\">\n          <ReactReduxTodo/>\n        </TabPane>\n        <TabPane tab=\"redux-toolkit\" key=\"2\">\n          <ReduxToolkitTodo/>\n        </TabPane>\n      </Tabs>\n    </ConfigProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}